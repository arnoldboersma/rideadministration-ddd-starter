// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RideAdministration.Infrastructure;

#nullable disable

namespace RideAdministration.Infrastructure.Migrations
{
    [DbContext(typeof(RideContext))]
    [Migration("20220524211702_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.4.22229.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence("orderseq", "ride")
                .IncrementsBy(10);

            modelBuilder.HasSequence("rideseq", "ride")
                .IncrementsBy(10);

            modelBuilder.HasSequence("ridestopseq", "ride")
                .IncrementsBy(10);

            modelBuilder.Entity("Ride.Domain.OrderAggregate.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "orderseq", "ride");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RideStopCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("orders", "ride");
                });

            modelBuilder.Entity("Ride.Domain.RideAggregate.Ride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "rideseq", "ride");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.ToTable("ride", "ride");
                });

            modelBuilder.Entity("Ride.Domain.RideAggregate.RideStop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "ridestopseq", "ride");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<bool>("_delivered")
                        .HasColumnType("bit")
                        .HasColumnName("Delivered");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("RideId");

                    b.ToTable("ridestop", "ride");
                });

            modelBuilder.Entity("Ride.Domain.OrderAggregate.Order", b =>
                {
                    b.OwnsOne("Ride.Domain.OrderAggregate.Address", "Address", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders", "ride");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Ride.Domain.RideAggregate.RideStop", b =>
                {
                    b.HasOne("Ride.Domain.OrderAggregate.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ride.Domain.RideAggregate.Ride", null)
                        .WithMany("RideStops")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Ride.Domain.RideAggregate.Address", "Address", b1 =>
                        {
                            b1.Property<int>("RideStopId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RideStopId");

                            b1.ToTable("ridestop", "ride");

                            b1.WithOwner()
                                .HasForeignKey("RideStopId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Ride.Domain.RideAggregate.Ride", b =>
                {
                    b.Navigation("RideStops");
                });
#pragma warning restore 612, 618
        }
    }
}
